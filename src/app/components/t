import React, { useReducer, useContext, useEffect } from 'react';
import { Types, Tarefas } from './context/ts/types';
import { List } from './List';
import { GlobalContext } from './context/Store';

const initialState = {
  adiconarTarefaDeCompra: '',
  preco: 0,
  precoTotal: 0,
  ListaDeCompra: [],
  isOpenModal: false,
};

const reducer = (state, action) => {
  switch (action.type) {
    case 'SET_ADICIONAR_TAREFA':
      return { ...state, adiconarTarefaDeCompra: action.payload };
    case 'SET_PRECO':
      return { ...state, preco: action.payload };
    case 'ADD_TAREFA':
      return {
        ...state,
        ListaDeCompra: [...state.ListaDeCompra, action.payload],
        precoTotal: state.precoTotal + action.payload.preco, // Somando o preço da nova tarefa ao precoTotal atual
      };
    default:
      return state;
  }
};


export const ListaDeCompra = () => {
  const [state, dispatch] = useReducer(reducer, initialState);
  const { adiconarTarefaDeCompra, precoTotal, ListaDeCompra,  } = state;
  const { setIsOpenModal, isOpenModal } = useContext(GlobalContext);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      if (isOpenModal) {
        document.body.style.overflow = 'hidden';
      } else {
        document.body.style.overflow = 'auto';
      }

      
    }
  }, [isOpenModal]);

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      adcionarTarefa();
    }
  };

  const adcionarTarefa = () => {
    const obj = {
      tarefa: state.adiconarTarefaDeCompra,
      id: new Date().getTime(),
      completed: false,
      preco: state.preco,
      precoTotal:state.precoTotal,
    };

    dispatch({ type: 'ADD_TAREFA', payload: obj });

    console.log(obj.precoTotal)

   // localStorage.setItem('listaDeCompra', JSON.stringify([...obj]));

  };
  
  return (
    <main className='p-3'>
      {isOpenModal ? (
        <section
          className={`fixed z-10 inset-0 flex justify-center items-center transition-colors visible bg-black/50`}
        >
          <div
            className={`bg-white rounded-lg flex flex-col gap-3 justify-center items-center text-center shadow p-6 transition-all max-w-md fixed z-50 text-black ${
              isOpenModal ? ' scale-100 opacity-100' : ' scale-1100 opacity-0'
            } `}
          >
            <h2 className='md:text-3xl text-2xl font-bangers '>Criar lista de compra</h2>
            <input
              type='text'
              value={state.adiconarTarefaDeCompra}
              className='text-black border-[#ccc] border p-2 rounded-full'
              placeholder='Escreva uma tarefa'
              onChange={(e) => dispatch({ type: 'SET_ADICIONAR_TAREFA', payload: e.target.value })}
              onKeyDown={handleKeyPress}
            />
            <input
              type='number'
              onChange={(e) => dispatch({ type: 'SET_PRECO', payload: e.target.valueAsNumber  })}
              value={state.preco}

            />
            <div className='flex flex-row gap-3'>
              <button className='bg-red-500 hover:bg-red-700 text-white p-2 rounded-full'
               onClick={() => setIsOpenModal(false)}>
                Fechar modal
              </button>
              <button className='bg-sky-500 hover:bg-sky-700 text-white p-2 rounded-full' 
              onClick={adcionarTarefa}>
                Adcionar tarefa
              </button>
            </div>
          </div>
        </section>
      ) : null}
      <List ListaDeCompra={state.ListaDeCompra} precoTotal={state.precoTotal} dispatch={dispatch}/> 
    </main>
  );
};
//!
//!
//!
//!
//!
'use client';
import React, {useRef, useState, useEffect, useContext, Fragment} from 'react'
import { ListaDeCompra, Tarefas} from "./context/ts/types";
import  {GlobalContext}  from "./context/Store";

import { FaPen } from "react-icons/fa";
import { FaTrash } from "react-icons/fa";
import { FaCheck } from "react-icons/fa6";
import { IoIosSave } from "react-icons/io";
import { DragEvent } from 'react'; // Importe o tipo DragEvent
export const List = ({ListaDeCompra, precoTotal, dispatch} : {ListaDeCompra: Tarefas[], precoTotal: number,
  }) => {
  const dragListaDeCompra = useRef<number | null>(null);
    const dragOverListaDeCompra = useRef<number | null>(null);    
    const [atualizarTarefaDeCompra, setAtualizarTarefaDeCompra,] = useState('');
    const [tarefaEmEdicaoId, setTarefaEmEdicaoId] = useState<number | null>(null); 
    const [SearchTarefas, setSearchTarefas] = useState('');


    const {Filtro} = useContext(GlobalContext);

    const handlerSort = () => {
        if (dragListaDeCompra.current !== null && dragOverListaDeCompra.current !== null) {
          const ListaDeCompraClone = [...ListaDeCompra];
          const temp = ListaDeCompraClone[dragListaDeCompra.current];
          ListaDeCompraClone[dragListaDeCompra.current] = ListaDeCompraClone[dragOverListaDeCompra.current];
          ListaDeCompraClone[dragOverListaDeCompra.current] = temp;
          dispatch({ type: 'ADD_TAREFA', payload: ListaDeCompraClone });
        }
      };

      
      const MacarTarefaComoConcluida = (id: number) => {
        const atualizarTarefa = ListaDeCompra.map((val) => {
          if (val.id === id) {
                return { ...val, completed: !val.completed };
            }   
            return val;
        });
        dispatch({ type: 'ADD_TAREFA', payload: atualizarTarefa });

        //localStorage.setItem('listaDeCompra', JSON.stringify(atualizarTarefa));
        
    }
    const excluirTarefas = (id: number) => {
        const deletarTarefa = ListaDeCompra.filter((val) => val.id != id)
        dispatch({ type: 'ADD_TAREFA', payload: deletarTarefa });

        //localStorage.setItem('listaDeCompra', JSON.stringify(deletarTarefa));
        
      }

      const atualizarTarefaFavorita = (id: number) => {
        setAtualizarTarefaDeCompra('');
        const atualizarTarefaFavorita = ListaDeCompra.map((val : Tarefas) => val.id === id? 
        { ...val, tarefa: atualizarTarefaDeCompra } : val)

        dispatch({ type: 'ADD_TAREFA', payload: atualizarTarefaFavorita});

        
        setTarefaEmEdicaoId(null); 

        //localStorage.setItem('listaDeCompra', JSON.stringify(atualizarTarefaFavorita));
        
      }
      
      useEffect(() => {
        const ListaDeCompraLocalStorage = localStorage.getItem('listaDeCompra');
        
        if (ListaDeCompraLocalStorage) {
        dispatch({ type: 'ADD_TAREFA', payload: ListaDeCompraLocalStorage});

        }
      }, [])
      
      const handleDragStart = (e: DragEvent<HTMLElement>, index: number) => {
        dragListaDeCompra.current = index;
        e.dataTransfer.setData('text/plain', String(index));
      };
    
      const handleDragEnter = (e: DragEvent<HTMLElement>, index: number) => {
        dragOverListaDeCompra.current = index;
        e.preventDefault();
      };

        const [Searchtarefas, setSearchtarefas] = useState('');

        console.log(ListaDeCompra)
    
      return (
        <main className=''>
            <section className=''>

            { Filtro === 2 && ListaDeCompra.length != 0?
          <div className='flex justify-center items-center'>
        <input type="text" className='text-black p-2 rounded-full border border-black
          mt-3 outline-none bg-[#edf2fc]' 
        onChange={(e) => setSearchtarefas(e.target.value)} value={Searchtarefas}
        placeholder='Pesquise por uma tarefa aqui...'
         />

        </div>

        :
        null
}

          {
            ListaDeCompra.length === 0 ?
            <h1 className='text-center text-red-500 font-bold text-2xl'>Nenhuma tarefa de compra adicionada</h1> 
            :

            <div>

              <p>Preço total da compra {precoTotal}</p>

            <div className=' h-72 overflow-auto 
            scrollbar-thin scrollbar-thumb-sky-500 
     scrollbar-track-sky-300   scrollbar-thumb-rounded-full scrollbar-track-rounded-full 
            '>
          {ListaDeCompra.map((item, index) => {
            const tarefaSalva = item.completed;
            const isMatchingSearch = item.tarefa.toLowerCase().includes(Searchtarefas.toLowerCase());

            return(
              <section key={item.id}>
               {  isMatchingSearch ?
               <div
                  draggable
                  onDragStart={(e) => handleDragStart(e, index)}
                  onDragEnter={(e) => handleDragEnter(e, index)}
                  onDragEnd={handlerSort}
                  className={`  p-3 border m-3 border-b-[#ccc] 
                  flex  flex-row justify-between ${tarefaSalva ? 'bg-green-500' : 'bg-red-500'}
                 border-0 rounded-lg `}
                >
                  {  tarefaEmEdicaoId != item.id?
                    <p className={`${tarefaSalva ? 'line-through' : ''}`}>{item.tarefa}</p>
                    :
                    <input type="text" className='text-black  w-28 md:w-96 p-1 rounded-full pl-3 outline-none'
                    value={atualizarTarefaDeCompra.length === 0 ? item.tarefa : atualizarTarefaDeCompra} 
                    onChange={(e) => setAtualizarTarefaDeCompra(e.target.value)} />
                  } 

                  <div className='flex  flex-row gap-4'>
                    <button  onClick={ tarefaEmEdicaoId === null?   () => setTarefaEmEdicaoId(item.id)  :
                    atualizarTarefaDeCompra.length === 0? () => setTarefaEmEdicaoId(null) : tarefaEmEdicaoId === item.id?
                    () => atualizarTarefaFavorita(item.id) : () => setTarefaEmEdicaoId(null)
                    }>
                        { tarefaEmEdicaoId === item.id? <IoIosSave /> :  <FaPen/>  }
                    </button>
                    <button onClick={() => excluirTarefas(item.id)}>
                        <FaTrash></FaTrash>
                    </button>
                    <button onClick={() => MacarTarefaComoConcluida(item.id)}>
                        <FaCheck></FaCheck>
                    </button>

                  </div>
               </div>
               :
               null
              }
              </section>

            )
          })}
            </div>
            </div>

          }   
            </section>
        </main>
      );
}
